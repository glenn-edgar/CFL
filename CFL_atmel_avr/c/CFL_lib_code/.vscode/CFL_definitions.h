#ifndef __CFL_definitions_H__
#define __CFL_definitions_H__

typedef struct Event_control_RAM_CFL_t
{
  unsigned short rx_index;
  unsigned short tx_index;
  unsigned short current_queued_number;
} Event_data_RAM_t;

typedef struct Event_control_ROM_t{ 
  unsigned                 number;
  unsigned                 start_index;
  Event_control_RAM_CFL_t  *event_control_ram;
} Event_control_ROM_t;



typedef struct Named_event_queue_control_CFL_t
{
  Event_data_CFL_t *event_data_array;
  unsigned number;
  Event_control_CFL_t *event_queues;
} Named_event_queue_control_CFL_t;



typedef struct Handle_CFL_t{
   Event_data_RAM_t                *event_data_array;
   Named_event_queue_control_CFL_t *named_event_queue_control;
   Column_Control_ROM_CFL_t        *column_control_rom;    


}Handle_CFL_t;



typedef struct Private_heap_element_t
{
    struct Private_Heap_Element *link;
    int size;
    void *data;

} Private_heap_element_t;

typedef struct Private_heap_control_t
{

    int number;
    Private_heap_element_t *private_heap;

} Private_heap_control_t;

/*
These data structures are generated by the lua assembler
unsigned short watch_dog_count_CFL[4];  // need to add
unsigned char column_RAM_flags_CFL[4];
unsigned char column_RAM_new_state_CFL[4];
void* column_RAM_local_data_CFL[4];

*/

typedef struct Column_watch_dog_ROM_CFL_t
{
   bool termination_flag;
   One_shot_function_CFL_t trigger_function;

} Column_watch_dog_ROM_CFL_t;


typedef struct Column_ROM_t
{
    unsigned short                 queue_number;
    bool                           auto_start;
    unsigned short                 id;
    unsigned short                 number;
    unsigned short                 start;
    unsigned short                 start_state;
    unsigned short                 end_state;    

} Column_ROM_t;

typedef Column_Element_ROM_T{
  Column_function_CFL_t column_fn;
  void *aux_function;
  void *params;
}Column_Element_ROM_T;


typedef struct Engine_control_CFL_t
{

    Time_control_CFL_t time_control;
   
    Idle_function_CFL_t idle_function;
    Calendar_function_CFL_t calendar_function;
    unsigned current_column_index;
    unsigned current_column_element_index;
    Event_data_CFL_t ref_event_data;
} Engine_control_CFL_t;


#endif