/*
**
** Verify opcode
*/

typedef struct Verify_User_Data_t {

  short target_event;
  unsigned target_event_count;
  unsigned current_event_count;
  const char* message;
} Verify_User_Data_t;

static void verify_end(void* input, void* params,
  Event_data_CFL_t* event_data) {
  Verify_User_Data_t* user_data;
  user_data = (Verify_User_Data_t*)params;
  Printf_CFL("---------------->verify end %s \n", user_data->message);
}

static bool verify_test(void* input, void* params,
  Event_data_CFL_t* event_data) {
  Verify_User_Data_t* user_data;
  user_data = (Verify_User_Data_t*)params;

  if (event_data->event_index == EVENT_INIT_CFL) {
    user_data->current_event_count = 0;
   
  }
  if (event_data->event_index == user_data->target_event) {

    user_data->current_event_count += 1;

    if (user_data->current_event_count == user_data->target_event_count) {
      return false;
    }
  }
  return true;
}

static void test_verify_opcode(Handle_config_CFL_t* config_handle) {

  
  Verify_User_Data_t verify_user_data_reset;
  verify_user_data_reset.target_event = 23;
  verify_user_data_reset.target_event_count = 10;
  verify_user_data_reset.message = "-----------------> reset event";

  Verify_User_Data_t verify_user_data_terminate;
  verify_user_data_terminate.target_event = 23;
  verify_user_data_terminate.target_event_count = 5;
  verify_user_data_terminate.message = "-------------> termination event";
 ]])

Conf_engine([[config_handle]],[[50000]],[[2500]])
column_list = { [["terminate_engine"]], [["event_generator"]], [["verify_reset"]], [["verify_terminate"]] };
Def_columns([[column_names]],column_list) 
Generate_event([[my_event_data]],[[23]],[[45]],[[NULL]])
  
Store_boolean_fn([["VERIFY_COUNT_EVENT"]], [[verify_test]]);
Store_one_shot( [["VERIFY_END"]], [[verify_end]]);

Start_column([["terminate_engine"]],true)
Log_msg([["terminate engine start"]])
Wait_delay([[50000]])
Log_msg([["wait done"]])
Log_msg([["stop engine"]])
Stop_engine()
End_column()


Start_column([["event_generator"]],true)
Wait_delay(1000)
Send_event([[&my_event_data]])
Log_msg([["event has been sent"]])
Reset_column()
End_column()

Start_column([["verify_reset"]],true)
Log_msg([["verify terminate column"]])
Log_msg([["this column will reset"]])
Verify_reset([["VERIFY_COUNT_EVENT"]],[["VERIFY_END"]],[[&verify_user_data_reset]])
Wait_no_time_out_terminate([["FALSE"]],[[NULL]],[[NULL]])
Log_msg([["This should not happen"]])
Term_column()
End_column()

Start_column([["verify_terminate"]],true)
Log_msg([["verify terminate column"]])
Log_msg([["this column will terminate"]])
Verify_terminate([["VERIFY_COUNT_EVENT"]],[["VERIFY_END"]],[[&verify_user_data_terminate]])
Wait_no_time_out_terminate([["FALSE"]],[[NULL]],[[NULL]])
Log_msg([["This should not happen"]])
Term_column()
End_column()



  pass_c([[

  Printf_CFL("starting engine");
  Start_engine_CFL(input, 100, 30, default_idle_function, default_calendar_function);

  Printf_CFL("Engine Done \n");
  Destroy_engine_CFL(input);

