pass_c([[
/*
  change test 1 so that data is used instead of an evet


*/




#include "test_column_data.h"
#include "CFL_user_functions.h"
#include "test_interface_functions.h"

static void column_data_test_a(Handle_config_CFL_t* config_handle);
static void column_data_test_b(Handle_config_CFL_t* config_handle);



void test_column_data(void) {



  Handle_config_CFL_t* config_handle = Create_config_handle_CFL(debug_write);

  Printf_CFL("test_allocation");


  config_handle->number_of_columns = 30;
  config_handle->number_of_column_elements = 300;

  config_handle->number_column_functions = 100;
  config_handle->number_bool_functions = 50;
  config_handle->number_if_functions = 50;
  config_handle->one_shot_functions = 50;
  config_handle->number_of_try_functions = 50;

  column_data_test_a(config_handle);
  column_data_test_b(config_handle);
  
}
]])





---
--- start of column_event_test_a
---
local one_shot_name = q('column_data_handler')
local one_shot_fn = 'column_data_fn'
local column_name = q('column_data_test')

local column_address = 'column_data_test'
local column_data = q('this is the column data test')

reset_template_tables()
      variable_table['fn'] = one_shot_fn
      variable_table['data_name'] = column_address
      variable_table['data'] = column_data


pass_c([[
  static const char *<<p data_name>> = <<p data>>;
  static void <<p fn>>(void *input,void *param,Event_data_CFL_t *event_data){
    (void) param;
    (void) event_data;
    char *column_data = (char *)Get_current_column_local_data_CFL(input);
    Printf_CFL("user data for column_data_test %s \n",column_data);


  }
]])

Start_function('column_data_test_a')
  
Conf_engine('config_handle',50000,4000)
Def_columns('column_names',{ column_name }) 


---
--- start of column_event_test_b
---






Store_one_shot(one_shot_name,one_shot_fn)

Start_column(column_name,true)
  Log_msg(q('starting column_event_test'))
  Store_local_column_data('(void*) '..column_address)
  
  One_shot(one_shot_name,'NULL')
  Log_msg(q('ending column_event_test'))
  Term_column()
End_column()

Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');
Destroy_engine(input, 'Engine Done\\n');


---
--- start of column_event_test_b
---
local one_shot_name = q('column_data_handler_b')
local one_shot_fn = 'column_data_fn_b'
local column_names = {q('column_send'),q('column_receive_1'),q('column_receive_2')}


local send_columns = {q('column_receive_1'),q('column_receive_2')}  

column_name_1 = "column_data_test_1"
column_name_2 = "column_data_test_2"

column_data_1 = q('this is the column data test 1')
column_data_2 = q('this is the column data test 2')

local send_data = {'(void *)'..column_data_1, '(void *)'..column_data_2}

reset_template_tables()
variable_table['fn'] = one_shot_fn
variable_table['data_name_1'] = column_name_1
variable_table['data_1'] = column_data_1
variable_table['data_name_2'] = column_name_2
variable_table['data_2'] = column_data_2

pass_c([[
  
  static void <<p fn>>(void *input,void *param,Event_data_CFL_t *event_data){
    (void) param;
    (void) event_data;
    char *column_data = (char *)Get_current_column_local_data_CFL(input);
    Printf_CFL("user data for column_data_test %s \n",column_data);


  }
]])

Start_function('column_data_test_b')
  
Conf_engine('config_handle',50000,4000)
Def_columns('column_names',column_names) 



Store_one_shot(one_shot_name,one_shot_fn)
local column_event_address = '&column_event_test' 

Start_column(column_names[1],true)
  Log_msg(q('starting column_set '))
 
  Store_column_data('send_columns', send_columns,'send_data', send_data)
  Log_msg(q('ending column_set'))
  Term_column()
End_column()


Start_column(column_names[2],true)
  Log_msg(q('starting column_receive_1'))
  One_shot(one_shot_name,'NULL')
  Log_msg(q('ending column_receive_1'))
  Term_column()
End_column()

Start_column(column_names[3],true)
  Log_msg(q('starting column_receive_2'))
  One_shot(one_shot_name,'NULL')
  Log_msg(q('ending column_receive_2'))
  Term_column()
End_column()

Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');
Destroy_engine(input, 'Engine Done\\n');

