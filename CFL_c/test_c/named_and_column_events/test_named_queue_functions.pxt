

pass_c([[

#include "test_named_queue_functions.h"
#include "CFL_user_functions.h"
#include "test_interface_functions.h"

static void test_basic_functions(Handle_config_CFL_t* config_handle);
static void test_rpc_server_client(Handle_config_CFL_t* config_handle);
void test_named_queue_functions(void) {

    Handle_config_CFL_t* config_handle = Create_config_handle_CFL(debug_write);
    Printf_CFL("named event queue test");
    Printf_CFL("free memory %d \n",freeMemory());


    config_handle->number_of_columns = 30;
    config_handle->number_of_column_elements = 300;
    config_handle->number_column_functions = 100;
    config_handle->number_bool_functions = 50;
    config_handle->number_if_functions = 50;
    config_handle->one_shot_functions = 50;
    config_handle->number_of_try_functions = 50;
    config_handle->number_of_named_queues = 20;
    //test_basic_functions(config_handle);
    test_rpc_server_client(config_handle);
}

]])

pass_c([[

/*  
typedef struct process_event_t_CFL
{
    unsigned short event_number;
    short *event_indexes;
    bool block_flag;
    short return_value;
    void *user_data;
} process_event_t_CFL;
*/


#define event_1   12
#define event_2   13
#define event_3   14
#define event_4   15
#define event_5   16
#define event_6   17
#define event_7   18
#define event_8   19

#define event_9 25
#define event_10 26

static const char *user_data_0 = "state machine 0 user data \n";

static void sm_0_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_0_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
   
      Printf_CFL("sm_0_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_0_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_1){
      Printf_CFL("sm_0_handler event %d %s\n",event_1,process_event->user_data);
   }
   if( event_data->event_index == event_2){
    Change_local_column_state_CFL(input,1);
    process_event->return_value = COLUMN_STATE_CHANGE_CFL;
     Printf_CFL("sm_0_handler event %d  %s\n",event_2,process_event->user_data);
   }


}

static const char *user_data_1 = "state machine 1 user data \n";

static void sm_1_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_1_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("sm_1_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_1_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
      
   }
   if( event_data->event_index == event_3){
      Printf_CFL("sm_1_handler event %d %s\n",event_3,process_event->user_data);
   }
   if( event_data->event_index == event_4){
     Printf_CFL("sm_1_handler event %d  %s\n",event_4,process_event->user_data);
     Change_local_column_state_CFL(input,2);
       process_event->return_value = COLUMN_STATE_CHANGE_CFL;
   }


}

static const char *user_data_2 = "state machine 2 user data \n";

static void sm_2_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_2_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("sm_2_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_2_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_5){
      Printf_CFL("sm_2_handler event %d %s\n",event_5,process_event->user_data);
      
   }
   if( event_data->event_index == event_6){
     Printf_CFL("sm_2_handler event %d  %s\n",event_6,process_event->user_data);
     Change_local_column_state_CFL(input,3);
      process_event->return_value = COLUMN_STATE_CHANGE_CFL;
   }


}
static const char *user_data_3 = "state machine 3 user data \n";

static void sm_3_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_3_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("sm_3_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_3_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_7){
      Printf_CFL("sm_3_handler event %d %s\n",event_7,process_event->user_data);
   }
   if( event_data->event_index == event_8){
     Printf_CFL("sm_3_handler event %d  %s\n",event_8,process_event->user_data);
     Change_local_column_state_CFL(input,0);
      process_event->return_value = COLUMN_STATE_CHANGE_CFL;
   }


}

static const char *filter_event_data = "filter event user data \n";

static void filter_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;

   Printf_CFL("filter event handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("filter event handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("filter event handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_9){
      Printf_CFL("filter event handler event %d %s\n",event_data->event_index,process_event->user_data);
   }
   if( event_data->event_index == 10){
     Printf_CFL("filter event handler %d  %s\n",event_data->event_index,process_event->user_data);
     
   }


}

static void generate_event(void *input, void *param, Event_data_CFL_t *event_data){
 
     Event_data_CFL_t *event_data_a = (Event_data_CFL_t *)param;
     Send_named_event_CFL(input,0,event_data_a);


}


]])



Start_function('test_basic_functions')
  
Conf_engine('config_handle',50000,4000)
Def_columns('column_names',{ q('test_column_state_machine'),q('event_generator'),q('time_out') }) 

local event_1 =  12
local event_2 =  13
local event_3 =  14
local event_4 =  15
local event_5 =  16
local event_6 =  17
local event_7 =  18
local event_8 =  19
local event_not_used =  99
local filter_1 =  25
local filter_2 =  26

Generate_event('event_data_1',event_1,45.2,'NULL')
Generate_event('event_data_2',event_2,46.3,'NULL')
Generate_event('event_data_3',event_3,47.4,'NULL')
Generate_event('event_data_4',event_4,48.5,'NULL')
Generate_event('event_data_5',event_5,49.6,'NULL')
Generate_event('event_data_6',event_6,50.2,'NULL')
Generate_event('event_data_7',event_7,51.4,'NULL')
Generate_event('event_data_8',event_8,53.5,'NULL')

Generate_event('not_used',event_not_used,53.5,'NULL')

Generate_event("filter_event_1",filter_1,53.5,'NULL')
Generate_event("filter_event_2",filter_2,53.5,'NULL')

local sm_0_data = '(void *)user_data_0'
local sm_1_data = '(void *)user_data_1'
local sm_2_data = '(void *)user_data_2'
local sm_3_data = '(void *)user_data_3'


local filter_data  = '(void *)filter_event_data'
local filter_handler = 'filter_handler'
local q_filter_handler = q(filter_handler)



local event_handler_0 = 'sm_0_handler'
local event_handler_1 = 'sm_1_handler'
local event_handler_2 = 'sm_2_handler'
local event_handler_3 = 'sm_3_handler'

local q_event_handler_0 = q('sm_0_handler')
local q_event_handler_1 = q('sm_1_handler')
local q_event_handler_2 = q('sm_2_handler')
local q_event_handler_3 = q('sm_3_handler')

Store_one_shot(q_event_handler_0,event_handler_0)
Store_one_shot(q_event_handler_1,event_handler_1)
Store_one_shot(q_event_handler_2,event_handler_2)
Store_one_shot(q_event_handler_3,event_handler_3)
Store_one_shot(q_filter_handler,filter_handler)

local sm_0 = 'sm_0'
local sm_1 =  'sm_1'
local sm_2 =  'sm_2'
local sm_3 =  'sm_3'
local filter_events = 'filter_events'

queue_list = { q('test_queue') } 
array_name = 'ev1'
queue_table = Generate_event_queue_names(array_name,queue_list)

Define_event_queue(q('test_queue'),16)

Start_queue_column(q('test_column_state_machine'),true,q('test_queue'))
  Log_msg(q('starting test_column_state_machine'))
  Store_event_filter(q_filter_handler,filter_events,{filter_1,filter_2},filter_data,true)
  Reset_event_queues(queue_table)
  Change_column_state(0)
  Store_column_start()
  
  Store_sm_handler(sm_0,q_event_handler_0,{event_1,event_2},sm_0_data) -- state 0
  Store_sm_handler(sm_1,q_event_handler_1,{event_3,event_4},sm_1_data) -- state 1
  Store_sm_handler(sm_2,q_event_handler_2,{event_5,event_6},sm_2_data) -- state 2
  Store_sm_handler(sm_3,q_event_handler_3,{event_7,event_8},sm_3_data) -- state 3
  Store_column_end()
  Halt_column()
End_column()



Store_one_shot(q('GENERATE_EVENT'),'generate_event')
Start_column(q('event_generator'),true)
   Log_msg(q('starting event_generator'))
   Wait_delay(1000)
   Send_event_queue(queue_table,'&event_data_1')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_1') -- testing event filter
   Wait_delay(1000)
   One_shot(q('GENERATE_EVENT'), '&event_data_2')
   --Send_event_queue(queue_table,'&event_data_2')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_2') -- testing event filter
   Wait_delay(1000)
   Send_event_queue(queue_table,'&event_data_3')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_1') -- testing event filter
   Wait_delay(1000)
   Send_event_queue(queue_table,'&event_data_4')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_2') -- testing event filter
  Wait_delay(1000)
   Send_event_queue(queue_table,'&event_data_5')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_1') -- testing event filter
  Wait_delay(1000)
   Send_event_queue(queue_table,'&event_data_6')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_2') -- testing event filter
  Wait_delay(1000)
   Send_event_queue(queue_table,'&event_data_7')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_1') -- testing event filter
  Wait_delay(1000)
   Send_event_queue(queue_table,'&event_data_8')
   Send_event_queue(queue_table,'&not_used') -- testing event rejection
   Send_event_queue(queue_table,'&filter_event_2') -- testing event filter
  Wait_delay(1000)
  Reset_column()
End_column()

Start_column(q('time_out'),true)
  Log_msg(q('starting time_out column'))
  Wait_delay(60000)
  Stop_engine()
End_column()

Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');
Destroy_engine(input, 'Engine Done\\n');


pass_c([[
#if 0   
typedef struct RPC_message_header_CFL_t {
   bool           success;
   unsigned       magic;
   unsigned short event_id;
   unsigned short request_id;
   unsigned short client_queue_id;
   unsigned short server_queue_id;
   bool           client_free_message_data;
   unsigned short client_data_size;
   void*          client_message_data;
   bool           server_free_message_data;
   unsigned short server_data_size;
   void*          server_message_data;
} RPC_message_header_CFL_t;
#endif

#define ACTION_1_REQUEST_ID 37
#define ACTION_2_REQUEST_ID 38

static const char *rpc_server_user_data_1 = "rpc_server_user_data_1";
static bool rpc_server_action_1(void *input, void *params, Event_data_CFL_t *event_data)
{
   if (event_data->event_index ==  EVENT_INIT_CFL){
      
      return true;
   }
   if(event_data->event_index == EVENT_TERMINATION_CFL){
    
      return true;
   }
   
   RPC_message_header_CFL_t *rpc_message_header = (RPC_message_header_CFL_t *)event_data->params;
   
   if(rpc_message_header->request_id == ACTION_1_REQUEST_ID){
      
      rpc_message_header->success = true;
      rpc_message_header->server_free_message_data = false;
      rpc_message_header->server_data_size = sizeof(rpc_server_user_data_1);
      rpc_message_header->server_message_data = (void *)rpc_server_user_data_1;
      return true;
   }
  
   return false;
     
}

static const char *rpc_server_user_data_2 = "rpc_server_user_data_2";
static bool rpc_server_action_2(void *input, void *params, Event_data_CFL_t *event_data)
{
   if (event_data->event_index ==  EVENT_INIT_CFL){
      ;
      return true;
   }
   if(event_data->event_index == EVENT_TERMINATION_CFL){
      return true;
   }
   RPC_message_header_CFL_t *rpc_message_header = (RPC_message_header_CFL_t *)event_data->params;
   if(rpc_message_header->request_id == ACTION_2_REQUEST_ID){
      rpc_message_header->success = true;
      rpc_message_header->server_free_message_data = false;
      rpc_message_header->server_data_size = sizeof(rpc_server_user_data_2);
      rpc_message_header->server_message_data = (void *)rpc_server_user_data_2;
      return true;
   }
   return false;
     
}

static const char *rpc_client_message_data_1 = "rpc_client_message_data_1";

static const char *rpc_client_user_data_1 = "rpc_client_user_data_1";
static void rpc_client_action_1(void *input, void *params, Event_data_CFL_t *event_data)
{
   RPC_message_header_CFL_t *rpc_message_header = (RPC_message_header_CFL_t *)event_data->params;
   Printf_CFL("\n\n\nrpc_client_action_1: event_id = %d\n", event_data->event_index);
   Printf_CFL("rpc_server data: %s \n", (char *)rpc_message_header->server_message_data);
   Printf_CFL("rpc_client data: %s \n", (char *)rpc_message_header->client_message_data);
  
}


static const char *rpc_client_failure_user_data_1 = "rpc_client_failure_user_data_1";

static void rpc_client_failure_1(void *input, void *params, Event_data_CFL_t *event_data)
{
   Printf_CFL("should not get here \n");
   Printf_CFL("didnot receive RPC Event \n");
}

static const char *rpc_client_message_data_2 = "rpc_client_message_data_2";

static const char *rpc_client_user_data_2 = "rpc_client_user_data_2";
static void rpc_client_action_2(void *input, void *params, Event_data_CFL_t *event_data)
{
   RPC_message_header_CFL_t *rpc_message_header = (RPC_message_header_CFL_t *)event_data->params;
   Printf_CFL("\n\n\nrpc_client_action_2: event_id = %d\n", event_data->event_index);
   Printf_CFL("rpc_server data: %s \n", (char *)rpc_message_header->server_message_data);
   Printf_CFL("rpc_client data: %s \n", (char *)rpc_message_header->client_message_data);
  
}


static const char *rpc_client_failure_user_data_2 = "rpc_client_failure_user_data_2";

static void rpc_client_failure_2(void *input, void *params, Event_data_CFL_t *event_data)
{
   Printf_CFL("should not get here \n");
   Printf_CFL("didnot receive RPC Event \n");
}


static const char *dispose_user_data_1 = "unhandled event \n";
static void dispose_event_1(void *input,void *params,Event_data_CFL_t *event_data){

  char *message = (char *)params;
  Printf_CFL("dispose_event_1: %d \n",event_data->event_index);
  Printf_CFL("dispose_event_1: %s \n",message);
   

}

]])




Start_function('test_rpc_server_client')

rpc_server_queue = q('rpc_server')
rpc_client_1_queue = q('rpc_client_1')
rpc_client_2_queue = q('rpc_client_2')

queue_list = {rpc_server_queue, rpc_client_1_queue, rpc_client_2_queue}
local named_queues = 'named_queues'
queue_table = Generate_event_queue_names(named_queues,queue_list)


Conf_engine('config_handle',50000,4000)
Def_columns('column_names',{ q('init_columns'),q('rpc_server'),q('rpc_client_1'),q('rpc_client_2'),q('time_out') }) 

for i,k in ipairs( queue_list) do
  Define_event_queue(k,16)
end







RPC_EVENT = 45
REQUEST_1 = 37
REQUEST_2 = 38

--
-- Server definitions
--

rpc_server_action_1 = q('RPC_SERVER_ACTION_1')
rpc_server_user_data_1 = '(void *)rpc_server_user_data_1'
Store_boolean_fn(rpc_server_action_1,'rpc_server_action_1')


rpc_server_action_2 = q('RPC_SERVER_ACTION_2')
rpc_server_user_data_2 = '(void *)rpc_server_user_data_2'
Store_boolean_fn(rpc_server_action_2,'rpc_server_action_2')

--
-- client 1 definitions
--

rpc_client_action_1 = q('RPC_CLIENT_ACTION_1')
rpc_client_user_data_1 = '(void *)rpc_client_user_data_1'
rpc_client_failure_1 = q('RPC_FAILURE_1')
rpc_client_failure_user_data_1 = '(void *)rpc_client_failure_user_data_1'
rpc_client_timeout_1 =  300 -- 300 milliseconds
rpc_client_message_data_1 = '(void *)rpc_client_message_data_1'
rpc_client_message_data_1_size = 'sizeof(rpc_client_message_data_1)'

rpc_client_action_2 = q('RPC_CLIENT_ACTION_2')
rpc_client_user_data_2 = '(void *)rpc_client_user_data_2'
rpc_client_failure_2 = q('RPC_FAILURE_2')
rpc_client_failure_user_data_2 = '(void *)rpc_client_failure_user_data_2'
rpc_client_timeout_2 =  300 -- 300 milliseconds
rpc_client_message_data_2 = '(void *)rpc_client_message_data_2'
rpc_client_message_data_2_size = 'sizeof(rpc_client_message_data_2)'


dispose_event_1 = q('DISPOSE_EVENT_1')
dispose_user_data_1 = '(void *)dispose_user_data_1'

Store_one_shot(rpc_client_action_1,'rpc_client_action_1')
Store_one_shot(rpc_client_failure_1,'rpc_client_failure_1')
Store_one_shot(rpc_client_action_2,'rpc_client_action_2')
Store_one_shot(rpc_client_failure_2,'rpc_client_failure_2')
Store_one_shot(dispose_event_1,'dispose_event_1') 

--
--
-- client 2 definitions
--
--

Start_column(q('init_columns'),true)
  Log_msg(q('starting int_columns'))
  Reset_event_queues(queue_table)
  Term_column()
End_column()


Start_queue_column(q('rpc_server'),true,rpc_server_queue)

  Log_msg(q('starting rpc_server'))
  -- will wait on an event
  
 Wait_event_no_time_out(RPC_EVENT,1)
  -- handle a specific rpc requests
  Wait_for_server_rpc_CFL(RPC_EVENT,rpc_server_action_1,rpc_server_user_data_1)
   -- handle a specific rpc requests
  Wait_for_server_rpc_CFL(RPC_EVENT,rpc_server_action_2,rpc_server_user_data_2)
  -- required to a respond to bad requests
  Dispose_RPC_event_CFL(RPC_EVENT,true,dispose_event_1,dispose_user_data_1) -- true will result in termination
   
  Reset_column()
End_column()


Start_queue_column(q('rpc_client_1'),true,rpc_client_1_queue)

  Log_msg(q('starting rpc_client_1'))

  --function Send_client_rpc_CFL(rpc_event_id, rpc_request_id, client_queue_name, server_queue_name,
  --  client_free_message_data, client_data_size, client_message_data)

  Send_client_rpc_CFL(RPC_EVENT,REQUEST_1,rpc_client_1_queue,rpc_server_queue,
         false,rpc_client_message_data_1_size,rpc_client_message_data_1)

   
   Wait_event_time_out_terminate(RPC_EVENT,1,rpc_client_timeout_1,
         rpc_client_failure_1,rpc_client_failure_user_data_1)
   Wait_for_client_rpc_CFL(RPC_EVENT,rpc_client_action_1,rpc_client_user_data_1)


  Wait_delay(3000)
  Reset_column()
End_column()





Start_queue_column(q('rpc_client_2'),true,rpc_client_2_queue)

  Log_msg(q('starting rpc_client_2'))

 
  Send_client_rpc_CFL(RPC_EVENT,REQUEST_2,rpc_client_2_queue,rpc_server_queue,
         false,rpc_client_message_data_2_size,rpc_client_message_data_2)

  
   Wait_event_time_out_terminate(RPC_EVENT,1,rpc_client_timeout_2,
         rpc_client_failure_2,rpc_client_failure_user_data_2)
   Wait_for_client_rpc_CFL(RPC_EVENT,rpc_client_action_2,rpc_client_user_data_2)


  Wait_delay(3000)
  Reset_column()
End_column()





Start_column(q('time_out'),true)
  Log_msg(q('starting time_out column'))
  Wait_delay(60000)
  Stop_engine()
End_column()

Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');
Destroy_engine(input, 'Engine Done\\n');


