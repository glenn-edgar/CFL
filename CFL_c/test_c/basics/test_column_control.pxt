
pass_c([[
#include "test_column_control.h"
#include "Cfl_user_functions.h"
#include "test_interface_functions.h"

static void test_enable_disable_columns(Handle_config_CFL_t* config_handle);

static void test_join_columns_no_terminate(Handle_config_CFL_t* config_handle);
static void test_join_columns_terminate(Handle_config_CFL_t* config_handle);
static void test_if_columns_normal_case(Handle_config_CFL_t* config_handle);
static void test_if_columns_terminate_case(Handle_config_CFL_t* config_handle);
static void
test_if_columns_non_terminate_case(Handle_config_CFL_t* config_handle);
static void test_try_no_invert_pass(Handle_config_CFL_t* config_handle);
static void test_try_no_invert_fail(Handle_config_CFL_t* config_handle);
static void test_try_invert(Handle_config_CFL_t* config_handle);
static void test_try_termination(Handle_config_CFL_t* config_handle);
static void test_try_no_termination(Handle_config_CFL_t* config_handle);
static void test_for_no_termination(Handle_config_CFL_t* config_handle);
static void test_for_termination(Handle_config_CFL_t* config_handle);
static void
test_while_column_no_termination(Handle_config_CFL_t* config_handle);
static void test_while_column_termination(Handle_config_CFL_t* config_handle);
static void
test_do_while_column_no_termination(Handle_config_CFL_t* config_handle);
static void
test_do_while_column_termination(Handle_config_CFL_t* config_handle);

void test_column_control() {





  Handle_config_CFL_t* config_handle = Create_config_handle_CFL(debug_write);

  Printf_CFL("column control test");
  

  config_handle->number_of_columns = 30;
  config_handle->number_of_column_elements = 300;

  config_handle->number_column_functions = 100;
  config_handle->number_bool_functions = 50;
  config_handle->number_if_functions = 50;
  config_handle->one_shot_functions = 50;
  config_handle->number_of_try_functions = 50;



  



  test_enable_disable_columns(config_handle);
  test_join_columns_no_terminate(config_handle);
  test_join_columns_terminate(config_handle);
  //test_if_columns_normal_case(config_handle);
  //test_if_columns_terminate_case(config_handle);
  //test_if_columns_non_terminate_case(config_handle);
  //test_try_no_invert_pass(config_handle);
  //test_try_no_invert_fail(config_handle);
  //test_try_invert(config_handle);
  //test_try_termination(config_handle);
  //test_try_no_termination(config_handle);
  //test_for_no_termination(config_handle);
  //test_for_termination(config_handle);
  //test_while_column_no_termination(config_handle);
  //test_while_column_termination(config_handle);
  //test_do_while_column_no_termination(config_handle);
  //test_do_while_column_termination(config_handle);
  free(config_handle);
}
]])
 Start_function('test_enable_disable_columns')

  column_names = quote_list( {"enable_no_terminate", "enable_terminate",
                                "disable_column", "reset_column",
                                "column_to_reset" })

  enable_terminate = quote_list( {"enable_terminate" }) 

  enable_columns = quote_list( {"disable_column", "reset_column",
                                  "column_to_reset" })

  disable_columns = quote_list( {"reset_column", "column_to_reset" })

  columns_to_reset = quote_list( {"column_to_reset" })                            
 
  Conf_engine('config_handle','50000','2500')


  Def_columns('column_names',column_names)
  
  Start_column(q('enable_no_terminate'),true)
  Enable_columns('enable_terminate',enable_terminate,false)
  Log_msg(q('terminate column'))
  Term_column()  --- All columns will terminate
  End_column() -- No active columns engine will terminate


  Start_column(q('enable_terminate'),false)
  Log_msg(q('will enable threads and wait 15 seconds and terminate'))
  Enable_columns('enable_columns',enable_columns,true)
  Wait_delay(15000)
  Log_msg(q('timer is done'))
  
  Term_column()
  End_column()

  

  Start_column(q('disable_column'),false)
  Log_msg(q("will disable reset column after 7 seconds"))
  Wait_delay(7000)
  Disable_columns('disable_columns',disable_columns)  
  Log_msg(q('Now will wait till enable_terminate column terminates this column'))
  Wait_no_time_out_terminate(q('FALSE'),'NULL')
  Log_msg(q("-------------- message should not happen ----------------------"))
  Term_column()
  End_column()

  
  Start_column(q('reset_column'),false)
  Log_msg(q('Repeating Message Every 3 Seconds'))
  
  Reset_columns('column_to_reset',columns_to_reset)
  Wait_delay(3000)
  Reset_column()
  End_column()
 

  Start_column(q('column_to_reset'), false)
  --Log_msg(q("column to reset will print message and terminate"))
  Term_column()
  End_column()

 Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');

  Destroy_engine('done with test_enable_disable_columns')




  Start_function('test_join_columns_terminate')


  column_names = quote_list( {"test_join", "delay_terminate" })
  delay_terminate = quote_list( {"delay_terminate" })

  Conf_engine('config_handle','50000','2500')
  Def_columns('column_names',column_names)
  
  Start_column(q('test_join'),true)
  Enable_columns('delay_terminate_enable',delay_terminate,false)
  Log_msg(q("waiting for join"))
  Join_columns('delay_terminate_join',delay_terminate,true)
  Log_msg(q("Column has been joined"))
  Term_column()
  End_column()
  
  Start_column(q('delay_terminate'),false)
  Log_msg(q("will wait 5 seconds and terminate"))
  Wait_delay(5000)
  Log_msg(q("timer is done"))
  Term_column()
  End_column()
  
  Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');
  Destroy_engine('done with test_join_columns_terminate')
  
Start_function('test_join_columns_no_terminate')

  
  column_names = quote_list( {"launch_column","test_join", "delay_terminate" })
  delay_terminate = quote_list( {"delay_terminate" })
  test_join       = quote_list( {"test_join"})

  Conf_engine('config_handle','50000','2500')
  Def_columns('column_names',column_names)
  
  Start_column(q('launch_column'),true)
  Enable_columns('test_join',test_join,true)
  Log_msg(q("Waiting for 15 seconds"))
  Wait_delay(15000)
  Log_msg(q("15 seconds is up"))
  Log_msg(q("Disabling Column"))
  Term_column()
  End_column()
  

  Start_column(q('test_join'),false)
  Enable_columns('delay_terminate_enable',delay_terminate,false)
  Log_msg(q("waiting for join"))
  Join_columns('delay_terminate_join',delay_terminate,true)
  Log_msg(q("Column has been joined"))
  Term_column()
  End_column()
  
  Start_column(q('delay_terminate'),false)
  Log_msg(q("will wait 5 seconds and terminate"))
  Wait_delay(5000)
  Log_msg(q("timer is done"))
  Term_column()
  End_column()
  
  Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');
  Destroy_engine('done with test_join_columns_no_terminate')
  
