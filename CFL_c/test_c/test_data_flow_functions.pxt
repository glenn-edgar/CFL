pass_c([[



#include "Cfl_user_functions.h"
#include "test_interface_functions.h"

static void test_set_clear_print_functions(Handle_config_CFL_t* config_handle);
static void test_set_lua_symbol_table(Handle_config_CFL_t* config_handle);
static void test_wait_and_verify_df_functions(Handle_config_CFL_t* config_handle);
//static void test_verify_functions(Handle_config_CFL_t* config_handle);

void test_data_flow_functions(void) {
  Handle_config_CFL_t* config_handle = Create_config_handle_CFL(debug_write);

  
  


  config_handle->number_of_columns = 30;
  config_handle->number_of_column_elements = 300;
  config_handle->number_column_functions = 100;
  config_handle->number_bool_functions = 50;
  config_handle->number_if_functions = 50;
  config_handle->one_shot_functions = 50;
  config_handle->number_of_try_functions = 50;
  config_handle->number_df_buffers = 2;
  config_handle->number_of_compiled_s_log_expressions = 5;
   
  test_set_clear_print_functions(config_handle);
  test_set_lua_symbol_table(config_handle);
  test_wait_and_verify_df_functions(config_handle);
  //test_verify_functions(config_handle);
}
]])
pass_c([[

static void test_set_clear_print_functions(Handle_config_CFL_t* config_handle) {
 
]]  )

  Init_df_buffers()
  Conf_engine('config_handle',50000,4000)
  Def_columns('column_names',{ q('test_buffer_functions') })  
  

  Start_column(q('test_buffer_functions'),true)
  Log_msg(q('starting test_buffer_functions'))
  Define_df_buffer('"test_1"', 64)
  Reset_df_buffer('"test_1"',true)
  Define_df_buffer('"test_2"',32)
  Reset_df_buffer('"test_2"',false)
  Set_df_buff_positions('"test_1"','test_array_1',{0,2,4,6,8,10,12,14,16},false)
  Set_df_buff_positions('"test_2"','test_array_2',{1,3,5,7,9,11,13,15,17},true)
  
  Print_df_buffer('"test_1"')
  Print_df_buffer('"test_2"')
  
  Copy_df_buff_array(q('test_1'),q('test_2'), 0,15, 15)
  Print_df_buffer(q('test_2'))
  Term_column()
  End_column()
 

  
 pass_c([[
  Start_engine_CFL(input, 100, 30, default_idle_function, default_calendar_function);

  Destroy_engine_CFL(input);
  Printf_CFL("Engine Done\n");
}
 ]]) 

pass_c([[
static void test_set_lua_symbol_table(Handle_config_CFL_t* config_handle) {
 
]]  )
  
  dofile("data_flow_buffers.lua")
  Init_df_buffers()
  Conf_engine('config_handle',50000,4000)
  Def_columns('column_names',{ q('test_buffer_functions') })  
  

  Start_column([["test_buffer_functions"]],true)
  Log_msg([["starting test_buffer_functions"]])
  Define_df_buffer('"test_1"', 64, lua_symbol_table_1)
  Reset_df_buffer('"test_1"',true)
  Define_df_buffer('"test_2"',32, lua_symbol_table_2)
  Reset_df_buffer('"test_2"',false)
  Set_df_buff_positions(q('test_1'),'test_array_1',{'px_0','px_2','px_4','px_6','px_8','px_10','px_12','px_14','px_16'},false)
  Set_df_buff_positions(q('test_2'),'test_array_2',{'ox_1','ox_3','ox_5','ox_7','ox_9','ox_11','ox_13','ox_15','ox_17'},true)
 
  Print_df_buffer('"test_1"')
  Print_df_buffer('"test_2"')
  
  Copy_df_buff_array(q('test_1'),q('test_2'), 0,15, 15)
  Print_df_buffer(q('test_2'))
  Term_column()
  End_column()


  
 pass_c([[
  Start_engine_CFL(input, 100, 30, default_idle_function, default_calendar_function);

  Destroy_engine_CFL(input);
  Printf_CFL("Engine Done\n");
}
 ]]) 


pass_c([[
static void test_wait_and_verify_df_functions(Handle_config_CFL_t* config){
]])
     dofile("data_flow_buffers.lua")
     Init_df_buffers()
     Conf_engine('config',50000,2500)

    set_positions = { "px_1","px_3","px_5","px_7","px_9","px_11","px_13","px_15","px_17","px_19"}
    column_names =  { q("setup_buffer") ,
                     q("shut_down_engine") }
                     -- q("wait_and_fail_terminate"),
                     -- q("wait_and_fail_reset"),
                     -- q("wait_verify_pass"),
                    --  q("wait_verify_fail_terminate"),
                    --  q("wait_verify_fail_reset") }

    true_expression_raw = '(|| (&@ px_1 px_3 px_5  px_7 px_9)(&@ px_1 px_3 px_5  px_7 px_9))'
    false_expression_raw = '(&& (&@ 1 3 5  7 9)(&@ px_2 px_3 px_5  px_7 px_9))'
    spare_expression_raw = '(&& (&@ 1 3 5  7 9)(&@ 2 3 5 7 9))'
    Define_df_buffer(q('test_1'),32,lua_symbol_table_1)
    true_expression = Generate_s_express(true_expression_raw, lua_symbol_table_1,32)
    false_expression = Generate_s_express(false_expression_raw, lua_symbol_table_1,32)
    spare_expression = Generate_s_express(spare_expression_raw, nil ,32)
    
    
    Def_columns('column_names',column_names) 

   
    Start_column(q("setup_buffer"),true)
    
    Log_msg(q('starting test_buffer_functions'))
    Print_df_buffer(q('test_1'))
    Set_df_buff_positions(q('test_1'),'test_array',set_positions,true)
    Print_df_buffer(q('test_1'))
    Term_column()
    End_column()

   Start_column(q("shut_down_engine"),true) 
   Log_msg(q('startin shut engine down'))
   Wait_delay(25000)
   Log_msg(q('Shutting engine down'))
   Stop_engine()
   End_column()

   


--[[
    Asm_start_column_CFL(input, "wait_and_fail_terminate", true);
    Asm_log_message_CFL(input, "wait_and_fail starting should terminate");
    Asm_wait_df_tokens_s_expression_CFL(input,"test_1",5000,NULL,NULL,true,false_expression); 
    Asm_log_message_CFL(input, "should not get here");
    Asm_halt_CFL(input);
    Asm_end_column_CFL(input);

    

    Asm_start_column_CFL(input, "wait_and_fail_reset", true);
    Asm_log_message_CFL(input, "wait_and_fail_reset starting should reset every 5 seconds");
    //Asm_wait_time_delay_CFL(input,5000);// wait 5 seconds
    Asm_wait_df_tokens_s_expression_CFL(input,"test_1",5000,NULL,NULL,false,false_expression); 
    Asm_log_message_CFL(input, "should not get here");
    Asm_halt_CFL(input);
    Asm_end_column_CFL(input);

    Asm_start_column_CFL(input, "wait_verify_pass", true);
    Asm_log_message_CFL(input, "wait_verify_pass starting should succeed");
    Asm_wait_df_tokens_s_expression_CFL(input,"test_1",5000,NULL,NULL,false,true_expression); 
    Asm_verify_df_tokens_s_expression_CFL(input,"test_1",true_expression,NULL,NULL,true); 
    Asm_log_message_CFL(input, "should  get here");
    Asm_halt_CFL(input);
    Asm_end_column_CFL(input);

    Asm_start_column_CFL(input, "wait_verify_fail_terminate", true);
    Asm_log_message_CFL(input, "wait_verify_fail_terminate starting should terminate");
    Asm_wait_df_tokens_s_expression_CFL(input,"test_1",5000,NULL,NULL,false,true_expression); 
    Asm_verify_df_tokens_s_expression_CFL(input,"test_1",false_expression,NULL,NULL,true); 
    Asm_log_message_CFL(input, "should not get here");
    Asm_halt_CFL(input);
    Asm_end_column_CFL(input);

    Asm_start_column_CFL(input, "wait_verify_fail_reset", true);
    Asm_wait_time_delay_CFL(input,5000);// wait 5 seconds
    Asm_log_message_CFL(input, "wait_verify_fail_reset starting should reset every 5 seconds");
    
    Asm_wait_df_tokens_s_expression_CFL(input,"test_1",5000,NULL,NULL,false,true_expression); 
    Asm_verify_df_tokens_s_expression_CFL(input,"test_1",false_expression,NULL,NULL,false); 
    Asm_log_message_CFL(input, "should not get here");
    Asm_halt_CFL(input);
    Asm_end_column_CFL(input);

]]--

pass_c([[
    //Printf_CFL("once heap size %d \n", Allocate_once_remaining_heap_size_CFL(input));
    //Printf_CFL("private heap size %d \n", Private_heap_largest_free_block_CFL(input));
    Start_engine_CFL(input, 100, 30, default_idle_function, default_calendar_function);
    //Printf_CFL("once heap size %d \n", Allocate_once_remaining_heap_size_CFL(input));
    //Printf_CFL("private heap size %d \n", Private_heap_largest_free_block_CFL(input));
    Destroy_engine_CFL(input);
    Printf_CFL("Engine is done\n");
}     
]])    