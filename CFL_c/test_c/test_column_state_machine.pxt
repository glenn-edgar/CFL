pass_c([[



#include "Cfl_user_functions.h"
#include "test_interface_functions.h"

static void test_column_state_machine_a(Handle_config_CFL_t* config_handle);

void test_column_state_machine(void) {
  Handle_config_CFL_t* config_handle = Create_config_handle_CFL(debug_write);

  
  


  config_handle->number_of_columns = 30;
  config_handle->number_of_column_elements = 300;
  config_handle->number_column_functions = 100;
  config_handle->number_bool_functions = 50;
  config_handle->number_if_functions = 50;
  config_handle->one_shot_functions = 50;
  config_handle->number_of_try_functions = 50;
  config_handle->number_df_buffers = 2;
  config_handle->number_of_compiled_s_log_expressions = 5;
   
  test_column_state_machine_a(config_handle);
}
]])
pass_c([[

/*  
typedef struct process_event_t_CFL
{
    unsigned short event_number;
    short *event_indexes;
    bool block_flag;
    short return_value;
    void *user_data;
} process_event_t_CFL;
*/


#define event_1   12
#define event_2   13
#define event_3   14
#define event_4   15
#define event_5   16
#define event_6   17
#define event_7   18
#define event_8   19

#define event_9 25
#define event_10 26

const char *user_data_0 = "state machine 0 user data \n";

static void sm_0_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_0_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
   
      Printf_CFL("sm_0_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_0_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_1){
      Printf_CFL("sm_0_handler event %d %s\n",event_1,process_event->user_data);
   }
   if( event_data->event_index == event_2){
    Change_local_column_state_CFL(input,1);
    process_event->return_value = COLUMN_STATE_CHANGE_CFL;
     Printf_CFL("sm_0_handler event %d  %s\n",event_2,process_event->user_data);
   }


}

const char *user_data_1 = "state machine 1 user data \n";

static void sm_1_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_1_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("sm_1_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_1_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
      
   }
   if( event_data->event_index == event_3){
      Printf_CFL("sm_1_handler event %d %s\n",event_3,process_event->user_data);
   }
   if( event_data->event_index == event_4){
     Printf_CFL("sm_1_handler event %d  %s\n",event_4,process_event->user_data);
     Change_local_column_state_CFL(input,2);
       process_event->return_value = COLUMN_STATE_CHANGE_CFL;
   }


}

const char *user_data_2 = "state machine 2 user data \n";

static void sm_2_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_2_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("sm_2_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_2_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_5){
      Printf_CFL("sm_2_handler event %d %s\n",event_5,process_event->user_data);
      
   }
   if( event_data->event_index == event_6){
     Printf_CFL("sm_2_handler event %d  %s\n",event_6,process_event->user_data);
     Change_local_column_state_CFL(input,3);
      process_event->return_value = COLUMN_STATE_CHANGE_CFL;
   }


}
const char *user_data_3 = "state machine 3 user data \n";

static void sm_3_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;
   process_event->return_value = HALT_CFL;
   Printf_CFL("sm_3_handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("sm_3_handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("sm_3_handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_7){
      Printf_CFL("sm_3_handler event %d %s\n",event_7,process_event->user_data);
   }
   if( event_data->event_index == event_8){
     Printf_CFL("sm_3_handler event %d  %s\n",event_8,process_event->user_data);
     Change_local_column_state_CFL(input,0);
      process_event->return_value = COLUMN_STATE_CHANGE_CFL;
   }


}

const char *filter_event_data = "filter event user data \n";

static void filter_handler(void* input, void *params, Event_data_CFL_t *event_data){
   process_event_t_CFL *process_event = (process_event_t_CFL *)params;

   Printf_CFL("filter event handler %d \n",event_data->event_index);
   if( event_data->event_index == EVENT_INIT_CFL){
      Printf_CFL("filter event handler EVENT_INIT_CFL %s\n",process_event->user_data);
   }     
   if( event_data->event_index == EVENT_TERMINATION_CFL){
      Printf_CFL("filter event handler EVENT_TERMINATION_CFL %s\n",process_event->user_data);
   }
   if( event_data->event_index == event_9){
      Printf_CFL("filter event handler event %d %s\n",event_data->event_index,process_event->user_data);
   }
   if( event_data->event_index == 10){
     Printf_CFL("filter event handler %d  %s\n",event_data->event_index,process_event->user_data);
     
   }


}



]])


Start_function('test_column_state_machine_a')
  
Conf_engine('config_handle',50000,4000)
Def_columns('column_names',{ q('test_column_state_machine'),q('event_generator') }) 

local event_1 =  12
local event_2 =  13
local event_3 =  14
local event_4 =  15
local event_5 =  16
local event_6 =  17
local event_7 =  18
local event_8 =  19
local event_not_used =  99
local filter_1 =  25
local filter_2 =  26

Generate_event('event_data_1',event_1,45.2,'NULL')
Generate_event('event_data_2',event_2,46.3,'NULL')
Generate_event('event_data_3',event_3,47.4,'NULL')
Generate_event('event_data_4',event_4,48.5,'NULL')
Generate_event('event_data_5',event_5,49.6,'NULL')
Generate_event('event_data_6',event_6,50.2,'NULL')
Generate_event('event_data_7',event_7,51.4,'NULL')
Generate_event('event_data_8',event_8,53.5,'NULL')

Generate_event('not_used',event_not_used,53.5,'NULL')

Generate_event("filter_event_1",filter_1,53.5,'NULL')
Generate_event("filter_event_2",filter_2,53.5,'NULL')

local sm_0_data = '(void *)user_data_0'
local sm_1_data = '(void *)user_data_1'
local sm_2_data = '(void *)user_data_2'
local sm_3_data = '(void *)user_data_3'


local filter_data  = '(void *)filter_event_data'
local filter_handler = 'filter_handler'
local q_filter_handler = q(filter_handler)



local event_handler_0 = 'sm_0_handler'
local event_handler_1 = 'sm_1_handler'
local event_handler_2 = 'sm_2_handler'
local event_handler_3 = 'sm_3_handler'

local q_event_handler_0 = q('sm_0_handler')
local q_event_handler_1 = q('sm_1_handler')
local q_event_handler_2 = q('sm_2_handler')
local q_event_handler_3 = q('sm_3_handler')

Store_one_shot(q_event_handler_0,event_handler_0)
Store_one_shot(q_event_handler_1,event_handler_1)
Store_one_shot(q_event_handler_2,event_handler_2)
Store_one_shot(q_event_handler_3,event_handler_3)
Store_one_shot(q_filter_handler,filter_handler)

local sm_0 = 'sm_0'
local sm_1 =  'sm_1'
local sm_2 =  'sm_2'
local sm_3 =  'sm_3'
local filter_events = 'filter_events'


Start_column(q('test_column_state_machine'),true)
  Log_msg(q('starting test_column_state_machine'))
  Store_event_filter(q_filter_handler,filter_events,{filter_1,filter_2},filter_data,true)
  Change_column_state(0)
  Store_column_start()
  
  Store_sm_handler(sm_0,q_event_handler_0,{event_1,event_2},sm_0_data) -- state 0
  Store_sm_handler(sm_1,q_event_handler_1,{event_3,event_4},sm_1_data) -- state 1
  Store_sm_handler(sm_2,q_event_handler_2,{event_5,event_6},sm_2_data) -- state 2
  Store_sm_handler(sm_3,q_event_handler_3,{event_7,event_8},sm_3_data) -- state 3
  Store_column_end()
  Halt_column()
End_column()



Start_column(q('event_generator'),true)
   Log_msg(q('starting event_generator'))
   Wait_delay(1000)
   Send_event('&event_data_1')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_1') -- testing event filter
   Wait_delay(1000)
   Send_event('&event_data_2')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_2') -- testing event filter
   Wait_delay(1000)
   Send_event('&event_data_3')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_1') -- testing event filter
   Wait_delay(1000)
   Send_event('&event_data_4')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_2') -- testing event filter
  Wait_delay(1000)
   Send_event('&event_data_5')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_1') -- testing event filter
  Wait_delay(1000)
   Send_event('&event_data_6')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_2') -- testing event filter
  Wait_delay(1000)
   Send_event('&event_data_7')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_1') -- testing event filter
  Wait_delay(1000)
   Send_event('&event_data_8')
   Send_event('&not_used') -- testing event rejection
   Send_event('&filter_event_2') -- testing event filter
  Wait_delay(1000)
  Reset_column()
End_column()


Start_engine( 100, 30, 'default_idle_function', 'default_calendar_function');
Destroy_engine(input, 'Engine Done\\n');
